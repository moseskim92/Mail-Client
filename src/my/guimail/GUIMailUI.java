/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my.guimail;
import my.guimail.resources.SMTPClient;
import javax.swing.table.DefaultTableModel;
import ViewMessage.*;
import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.*;
import javax.mail.internet.*;
import javax.mail.Flags.Flag;
import javax.mail.search.FlagTerm;
import java.util.*;
import java.util.List;

import javax.swing.*;
import javax.swing.text.DocumentFilter;

import com.sun.xml.internal.bind.v2.runtime.unmarshaller.XsiNilLoader.Array;

import java.awt.event.*;
import java.awt.*;
import java.io.File;
/**
 *
 * @author c_admin
 */

public class GUIMailUI extends javax.swing.JFrame {

    /**
     * Creates new form GUIMailUI
     */
    int page=0;
    int currentFolder = 0;
    int mesleng=0;
    String mailBox = "INBOX";
    String[] mailboxes = new String[20];
    Folder mailFolder;
    Folder trash;
    String [][] Emails = new String[120][6];
    String [][] Emails10 = new String[10][6];
    String [][] Emails20 = new String[10][6];
    String [][] Emails30 = new String[10][6];
    String [][] Emails40 = new String[10][6];
    String [][] Emails50 = new String[10][6];
    
    public GUIMailUI() {
        super("MailMe v1.0");
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
	//@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">GEN-BEGIN:initComponents
    private void initComponents() {

        composeButton = new javax.swing.JButton();
        receiveButton = new javax.swing.JButton();
        openButton = new javax.swing.JButton();
        moveButton = new javax.swing.JButton();
        moveButton1 = new javax.swing.JButton();
        searchFiled = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        listNumberEmails = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        folderList = new javax.swing.JList();
        appName = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        emailList = new javax.swing.JTable();
        button1 = new javax.swing.JButton();
        button2 = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        fileMenu_close = new javax.swing.JMenuItem();
        settingsMenu = new javax.swing.JMenu();
        servicesMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        composeButton.setText("Compose");
        composeButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        composeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                composeButtonActionPerformed(evt);
            }
        });

        receiveButton.setText("Recieve");
        receiveButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        receiveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                receiveButtonMouseClicked(evt);
            }
        });

        openButton.setText("Open");
        openButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        moveButton.setText("Move...");
        moveButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        moveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveButtonActionPerformed(evt);
            }
        });

        moveButton1.setText("Delete");
        moveButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        moveButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveButton1ActionPerformed(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        listNumberEmails.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ALL", "10", "20", "30" }));
        listNumberEmails.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        listNumberEmails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listNumberEmailsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(listNumberEmails, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(listNumberEmails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        getFolders();
        System.out.println("Pulling Folders...");
        folderList.setModel(new javax.swing.AbstractListModel() {
            public int getSize() { return mailboxes.length; }
            public Object getElementAt(int i) { return mailboxes[i]; }
        });
        folderList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        folderList.setSelectedIndex(0);
        folderList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                folderListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(folderList);

        appName.setText("MailMe v1.0");
        
        getEmails(listNumberEmails.getSelectedIndex());
        emailList.setAutoCreateRowSorter(true);
        emailList.setBackground(new java.awt.Color(229, 231, 246));
        emailList.setModel(new javax.swing.table.DefaultTableModel(
            Emails ,
            new String [] {
                "!", "Status", "Date", "Recevied From", "Message", "Size"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        emailList.setSelectionBackground(new java.awt.Color(0, 0, 0));
        emailList.setSelectionForeground(new java.awt.Color(0, 153, 153));
        emailList.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        emailList.setShowGrid(false);
        emailList.getTableHeader().setReorderingAllowed(false);
        emailList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                emailListMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(emailList);
        emailList.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (emailList.getColumnModel().getColumnCount() > 0) {
            emailList.getColumnModel().getColumn(0).setPreferredWidth(1);
        }
        emailList.getAccessibleContext().setAccessibleName("");

        fileMenu.setText("File");

        fileMenu_close.setText("Close");
        fileMenu_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenu_closeActionPerformed(evt);
            }
        });
        fileMenu.add(fileMenu_close);

        menuBar.add(fileMenu);

        settingsMenu.setText("Settings");
        menuBar.add(settingsMenu);

        servicesMenu.setText("Services");
        menuBar.add(servicesMenu);

        setJMenuBar(menuBar);
            
        button1.setText("<");
        button1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });
        button2.setText(">");
        button2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button2ActionPerformed(evt);
            }
        });
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.CENTER, layout.createSequentialGroup()
                        .addComponent(composeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(receiveButton, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(openButton, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(moveButton, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(moveButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane1))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(appName))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(button2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(searchFiled, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(moveButton1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(moveButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(openButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(receiveButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(composeButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(searchFiled, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(searchButton))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(208, 208, 208)
                                .addComponent(button2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(appName))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );




        pack();
    }// </editor-fold> GEN-END:initComponents

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        // TODO add your handling code here:
        
        int aa =0;
    int limit = mesleng/10;
    if (listNumberEmails.getSelectedIndex() ==1)
    {
        Emails=new String[10][6];
        if (page <limit)
        {
            if (page==1)
            {
                Emails=Emails10;
                System.out.println("im in!");
                page--;
            }
            else if (page==2)
            {
             Emails=Emails20;
             page--;
            }
            else if(page==3)
            {
                Emails=Emails30;
                page--;
            }
            else if (page==4)
            {
                Emails=Emails40;
                page--;
            }

        }
    }if (listNumberEmails.getSelectedIndex() ==2)
    {
        Emails=new String[20][6];
        limit  = mesleng/20;
        aa=0;    
        if(page<limit+1)
        {
            if (page==1)
            {
                for (int i =0; i<10;i++)
                {
                    Emails[i][0]=Emails10[i][0];
                    Emails[i][1]=Emails10[i][1];
                    Emails[i][2]=Emails10[i][2];
                    Emails[i][3]=Emails10[i][3];
                    Emails[i][4]=Emails10[i][4];
                    Emails[i][5]=Emails10[i][5];
                    Emails[i+10][0]=Emails20[aa][0];
                    Emails[i+10][1]=Emails20[aa][1];
                    Emails[i+10][2]=Emails20[aa][2];
                    Emails[i+10][3]=Emails20[aa][3];
                    Emails[i+10][4]=Emails20[aa][4];
                    Emails[i+10][5]=Emails20[aa][5];
                    aa++;
                }
                page--;
            }
            else if (page==2)
            {
                for (int i =0; i<10;i++)
                {
                    Emails[i][0]=Emails30[i][0];
                    Emails[i][1]=Emails30[i][1];
                    Emails[i][2]=Emails30[i][2];
                    Emails[i][3]=Emails30[i][3];
                    Emails[i][4]=Emails30[i][4];
                    Emails[i][5]=Emails30[i][5];
                    Emails[i+10][0]=Emails40[aa][0];
                    Emails[i+10][1]=Emails40[aa][1];
                    Emails[i+10][2]=Emails40[aa][2];
                    Emails[i+10][3]=Emails40[aa][3];
                    Emails[i+10][4]=Emails40[aa][4];
                    Emails[i+10][5]=Emails40[aa][5];
                    aa++;
                }
                page--;
            }
        }
    }
    if (listNumberEmails.getSelectedIndex() == 3)
    {
        Emails=new String[30][6];
        limit = mesleng/30;
        if (page<limit+1)
        {
            if (page==1)
            {
                for (int i =0; i<10;i++)
                {
                    Emails[i][0]=Emails10[i][0];
                    Emails[i][1]=Emails10[i][1];
                    Emails[i][2]=Emails10[i][2];
                    Emails[i][3]=Emails10[i][3];
                    Emails[i][4]=Emails10[i][4];
                    Emails[i][5]=Emails10[i][5];
                    Emails[i+10][0]=Emails20[aa][0];
                    Emails[i+10][1]=Emails20[aa][1];
                    Emails[i+10][2]=Emails20[aa][2];
                    Emails[i+10][3]=Emails20[aa][3];
                    Emails[i+10][4]=Emails20[aa][4];
                    Emails[i+10][5]=Emails20[aa][5];
                    Emails[i+20][0]=Emails30[aa][0];
                    Emails[i+20][1]=Emails30[aa][1];
                    Emails[i+20][2]=Emails30[aa][2];
                    Emails[i+20][3]=Emails30[aa][3];
                    Emails[i+20][4]=Emails30[aa][4];
                    Emails[i+20][5]=Emails30[aa][5];
                    aa++;
                }
                page--;
            }
        }
    }
    emailList.setModel(new javax.swing.table.DefaultTableModel(
    Emails,
    new String [] {
        "!", "Status", "Date", "Recevied From", "Subject", "Size"
    }
    ) {
        Class[] types = new Class [] {
            java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
        };
        boolean[] canEdit = new boolean [] {
            false, false, false, false, false, false
        };

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    if (emailList.getColumnModel().getColumnCount() > 0) {
        emailList.getColumnModel().getColumn(0).setPreferredWidth(1);
    }
    emailList.repaint();
    super.repaint();

    }//GEN-LAST:event_button1ActionPerformed
private void button2ActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
    System.out.println("hello");
    
    int limit=0;
    int aa =0;
    System.out.println(limit);
    System.out.println(page);
    if (listNumberEmails.getSelectedIndex() ==1)
    {
        Emails=new String[10][6];
        limit = mesleng/10;
        if (page <limit)
        {
            if (page==0)
            {
                Emails=Emails20;
                System.out.println("im in!");
                page++;
            }
            else if (page==1)
            {
             Emails=Emails30;
             page++;
            }
            else if(page==2)
            {
                Emails=Emails40;
                page++;
            }
            else if (page==3)
            {
                Emails=Emails50;
                page++;
            }

        }
    }
    if (listNumberEmails.getSelectedIndex() ==2)
    {
        Emails=new String[20][6];
        limit  = mesleng/20;
        aa=0;    
        if(page<limit)
        {
            if (page==0)
            {
                for (int i =0; i<10;i++)
                {
                    Emails[i][0]=Emails30[i][0];
                    Emails[i][1]=Emails30[i][1];
                    Emails[i][2]=Emails30[i][2];
                    Emails[i][3]=Emails30[i][3];
                    Emails[i][4]=Emails30[i][4];
                    Emails[i][5]=Emails30[i][5];
                    Emails[i+10][0]=Emails40[aa][0];
                    Emails[i+10][1]=Emails40[aa][1];
                    Emails[i+10][2]=Emails40[aa][2];
                    Emails[i+10][3]=Emails40[aa][3];
                    Emails[i+10][4]=Emails40[aa][4];
                    Emails[i+10][5]=Emails40[aa][5];
                    aa++;
                }
                page++;
            }
            else if (page==1)
            {
                for (int i =0; i<10;i++)
                {
                    Emails[i][0]=Emails50[i][0];
                    Emails[i][1]=Emails50[i][1];
                    Emails[i][2]=Emails50[i][2];
                    Emails[i][3]=Emails50[i][3];
                    Emails[i][4]=Emails50[i][4];
                    Emails[i][5]=Emails50[i][5];
                }
                page++;
            }
        }
    }
    if (listNumberEmails.getSelectedIndex() == 3)
    {
        Emails=new String[30][6];
        limit = mesleng/30;
        aa=0;
        if (page<limit)
        {    
            Emails=new String[30][6];
            if (page==0)    
            {
                for (int i =0; i<10;i++)
                {
                    Emails[i][0]=Emails40[i][0];
                    Emails[i][1]=Emails40[i][1];
                    Emails[i][2]=Emails40[i][2];
                    Emails[i][3]=Emails40[i][3];
                    Emails[i][4]=Emails40[i][4];
                    Emails[i][5]=Emails40[i][5];
                    Emails[i+10][0]=Emails50[aa][0];
                    Emails[i+10][1]=Emails50[aa][1];
                    Emails[i+10][2]=Emails50[aa][2];
                    Emails[i+10][3]=Emails50[aa][3];
                    Emails[i+10][4]=Emails50[aa][4];
                    Emails[i+10][5]=Emails50[aa][5];
                    aa++;

                }
                page++;
            }
           
            
        }
    }
    emailList.setModel(new javax.swing.table.DefaultTableModel(
    Emails,
    new String [] {
        "!", "Status", "Date", "Recevied From", "Subject", "Size"
    }
    ) {
        Class[] types = new Class [] {
            java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
        };
        boolean[] canEdit = new boolean [] {
            false, false, false, false, false, false
        };

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    if (emailList.getColumnModel().getColumnCount() > 0) {
        emailList.getColumnModel().getColumn(0).setPreferredWidth(1);
    }
        emailList.repaint();
        super.repaint();
    }    
    private void listNumberEmailsActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        // TODO add your handling code here:
        System.out.println(listNumberEmails.getSelectedIndex());
        page=0;
        int show = listNumberEmails.getSelectedIndex();
        if (show ==1)
        {
            Emails=Emails10;

        }
        if (show ==2)
        {
            Emails=new String[20][6];
            int aa=0;    
            for (int i =0; i<10;i++)
            {
                Emails[i][0]=Emails10[i][0];
                Emails[i][1]=Emails10[i][1];
                Emails[i][2]=Emails10[i][2];
                Emails[i][3]=Emails10[i][3];
                Emails[i][4]=Emails10[i][4];
                Emails[i][5]=Emails10[i][5];
                Emails[i+10][0]=Emails20[aa][0];
                Emails[i+10][1]=Emails20[aa][1];
                Emails[i+10][2]=Emails20[aa][2];
                Emails[i+10][3]=Emails20[aa][3];
                Emails[i+10][4]=Emails20[aa][4];
                Emails[i+10][5]=Emails20[aa][5];
                aa++;

            }

        }
        if (show ==3)
        {
            Emails=new String[30][6];
            int aa=0;    
            for (int i =0; i<10;i++)
            {
                Emails[i][0]=Emails10[i][0];
                Emails[i][1]=Emails10[i][1];
                Emails[i][2]=Emails10[i][2];
                Emails[i][3]=Emails10[i][3];
                Emails[i][4]=Emails10[i][4];
                Emails[i][5]=Emails10[i][5];
                Emails[i+10][0]=Emails20[aa][0];
                Emails[i+10][1]=Emails20[aa][1];
                Emails[i+10][2]=Emails20[aa][2];
                Emails[i+10][3]=Emails20[aa][3];
                Emails[i+10][4]=Emails20[aa][4];
                Emails[i+10][5]=Emails20[aa][5];
                Emails[i+20][0]=Emails30[aa][0];
                Emails[i+20][1]=Emails30[aa][1];
                Emails[i+20][2]=Emails30[aa][2];
                Emails[i+20][3]=Emails30[aa][3];
                Emails[i+20][4]=Emails30[aa][4];
                Emails[i+20][5]=Emails30[aa][5];
                aa++;

            }
        }
        emailList.setModel(new javax.swing.table.DefaultTableModel(
    Emails,
    new String [] {
        "!", "Status", "Date", "Recevied From", "Subject", "Size"
    }
    ) {
        Class[] types = new Class [] {
            java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
        };
        boolean[] canEdit = new boolean [] {
            false, false, false, false, false, false
        };

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    if (emailList.getColumnModel().getColumnCount() > 0) {
        emailList.getColumnModel().getColumn(0).setPreferredWidth(1);
    }
        emailList.repaint();
        super.repaint();
                
        //getEmails(listNumberEmails.getSelectedIndex());
        
    }                                                

    private void emailListMouseClicked(java.awt.event.MouseEvent evt) {                                       
        // TODO add your handling code here:
        int row = emailList.getSelectedRow()+1;
        int col = emailList.getSelectedColumn();
        //System.out.println("Selected: "+emailList.getValueAt(row, row));
        System.out.println("Selected email at row: "+row);
        if(col == 0)
            emailList.setValueAt("!", row-1, col); 
        
    }                                      
    
    private void folderListMouseClicked(java.awt.event.MouseEvent evt) {                                       
        // TODO add your handling code here:
        System.out.println("Selected Folder: "+folderList.getSelectedValue());
        redrawFolderList();
    }  
    
    private void receiveButtonMouseClicked(java.awt.event.MouseEvent evt) {                                           
        // TODO add your handling code here:
        System.out.println("Receive button - Getting emails...");
        getFolders();
        getEmails(listNumberEmails.getSelectedIndex());
        emailList.setModel(new javax.swing.table.DefaultTableModel(
            Emails,
            new String [] {
                "!", "Status", "Date", "Recevied From", "Subject", "Size"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        if (emailList.getColumnModel().getColumnCount() > 0) {
            emailList.getColumnModel().getColumn(0).setPreferredWidth(1);
        }
        super.repaint();
    }                                          

    private void composeButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
        final my.guimail.resources.SMTPClient compose = new my.guimail.resources.SMTPClient();
        compose.show();
        System.out.println("Compose button - Create email");
        Runnable r = new Runnable() {
          public void run() {
            try {
              while(!compose.complete());
              compose.dispose();
              System.out.println("Email sent!");
            }
            catch (Exception ex) {
              ex.printStackTrace(); 
            }
          } 
        };
        Thread t = new Thread(r);
        t.start();
    }                                             

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        int row = emailList.getSelectedRow();
        System.out.println("Open button - email: ");
        for(int col = 0; col <6; col++)
            System.out.print(emailList.getModel().getValueAt(row, col)+" ");
        System.out.println("");
        ViewMessage view = new ViewMessage(row);
        view.setVisible(true);
         view.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        
        System.out.println("");
    }                                          

    private void moveButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        int row = emailList.getSelectedRow()+1;
        System.out.println("Move email at row: "+row);
        row = row-1;
        List<Message> moveMessages = new ArrayList<>();
         try {
        Properties props = new Properties();
        props.put("mail.host","mail.smtp.host");
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.port", "587");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.EnableSSL.enable", "true");
        
        Session mailConnection = Session.getDefaultInstance(props, new javax.mail.Authenticator()
        {
            protected PasswordAuthentication getPasswordAuthentication()
            {
                return new PasswordAuthentication("agroupece433@gmail.com", "ece433test");
            }
        });
        props.setProperty("mail.store.protocol", "imaps");
    /*  Create the session and get the store for read the mail. */
    //Session session = Session.getDefaultInstance(props, null);
    Store store = mailConnection.getStore("imaps");
    store.connect("imap.gmail.com","agroupece433@gmail.com", "ece433test");

    /*  Mention the folder name which you want to read. */
    mailFolder = store.getFolder(mailBox);
    
    /*Open the inbox using store.*/
    if(!mailFolder.isOpen())
        mailFolder.open(mailFolder.READ_WRITE);

    /*  Get the messages which is unread in the Inbox*/
    //Message messages[] = inbox.search(new FlagTerm(new Flags(Flag.SEEN), false));
    Message messages[] = mailFolder.getMessages();
    
    /* Use a suitable FetchProfile    */
    FetchProfile fp = new FetchProfile();
    fp.add(FetchProfile.Item.ENVELOPE);
    fp.add(FetchProfile.Item.CONTENT_INFO);
    Emails = new String[120][6]; 
    mailFolder.fetch(messages, fp);
        try
        {
          moveMessages.add(messages[row]);
        messages[row].setFlag(Flag.SEEN,false);
        if (mailFolder.isOpen()) 
        {
            if(moveMessages.size() > 0){
                trash = store.getFolder("INBOX");
                Message[] tempMessageArray = moveMessages.toArray(new Message[moveMessages.size()]);
                mailFolder.copyMessages(tempMessageArray,trash);
                moveMessages.clear();
         }
         mailFolder.close(true);
        redrawFolderList();
         super.repaint();
        }
        }
        catch (Exception ex)
        {
            System.out.println("Exception arise at the time of read mail 1");
            ex.printStackTrace();
        }
    }
    catch (NoSuchProviderException e)
    {
        e.printStackTrace();
        System.exit(1);
    }
    catch (MessagingException e)
    {
        e.printStackTrace();
        System.exit(2);
    }
    }                                          

    private void moveButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        int row = emailList.getSelectedRow();
        System.out.println("Delete email: "+emailList.getSelectedRow());
        List<Message> deletedMessages = new ArrayList<>();
         try {
        Properties props = new Properties();
        props.put("mail.host","mail.smtp.host");
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.port", "587");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.EnableSSL.enable", "true");
        
        Session mailConnection = Session.getDefaultInstance(props, new javax.mail.Authenticator()
        {
            protected PasswordAuthentication getPasswordAuthentication()
            {
                return new PasswordAuthentication("agroupece433@gmail.com", "ece433test");
            }
        });
        props.setProperty("mail.store.protocol", "imaps");
    /*  Create the session and get the store for read the mail. */
    //Session session = Session.getDefaultInstance(props, null);
    Store store = mailConnection.getStore("imaps");
    store.connect("imap.gmail.com","agroupece433@gmail.com", "ece433test");

    /*  Mention the folder name which you want to read. */
    mailFolder = store.getFolder(mailBox);
    
    /*Open the inbox using store.*/
    if(!mailFolder.isOpen())
        mailFolder.open(mailFolder.READ_WRITE);

    /*  Get the messages which is unread in the Inbox*/
    //Message messages[] = inbox.search(new FlagTerm(new Flags(Flag.SEEN), false));
    Message messages[] = mailFolder.getMessages();
    
    /* Use a suitable FetchProfile    */
    FetchProfile fp = new FetchProfile();
    fp.add(FetchProfile.Item.ENVELOPE);
    fp.add(FetchProfile.Item.CONTENT_INFO);
    Emails = new String[120][6]; 
    mailFolder.fetch(messages, fp);
        try
        {
            deletedMessages.add(messages[row]);
            if(mailFolder.getName().contentEquals("Trash"))
                messages[row].setFlag(Flags.Flag.DELETED, true);
        messages[row].setFlag(Flag.SEEN,false);
        if (mailFolder.isOpen()) 
        {
            if(deletedMessages.size() > 0){
                trash = store.getFolder("[Gmail]/Trash");
                Message[] tempMessageArray = deletedMessages.toArray(new Message[deletedMessages.size()]);
                mailFolder.copyMessages(tempMessageArray,trash);
                deletedMessages.clear();
         }
         mailFolder.close(true);
        redrawFolderList();
         super.repaint();
        }
        }
        catch (Exception ex)
        {
            System.out.println("Exception arise at the time of read mail 2");
            ex.printStackTrace();
        }
    }
    catch (NoSuchProviderException e)
    {
        e.printStackTrace();
        System.exit(1);
    }
    catch (MessagingException e)
    {
        e.printStackTrace();
        System.exit(2);
    }
    }                                           

    private void fileMenu_closeActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
        System.exit(0);
    }                                              
    private void getEmails(int show)
    {
        page=0;
        try {
        Properties props = new Properties();
        props.put("mail.host","mail.smtp.host");
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.port", "587");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.EnableSSL.enable", "true");
        
        Session mailConnection = Session.getDefaultInstance(props, new javax.mail.Authenticator()
        {
            protected PasswordAuthentication getPasswordAuthentication()
            {
                return new PasswordAuthentication("agroupece433@gmail.com", "ece433test");
            }
        });
        props.setProperty("mail.store.protocol", "imaps");
    /*  Create the session and get the store for read the mail. */
    //Session session = Session.getDefaultInstance(props, null);
    Store store = mailConnection.getStore("imaps");
    store.connect("imap.gmail.com","agroupece433@gmail.com", "ece433test");
    System.out.println("Getting emails...");
    /*  Mention the folder name which you want to read. */
    mailFolder = store.getFolder(mailBox);
    System.out.println("No. of Unread Messages : " + mailFolder.getUnreadMessageCount());
    System.out.println("No. of Messages : " + mailFolder.getMessageCount());
    
    /*Open the inbox using store.*/
    if(!mailFolder.isOpen())
        mailFolder.open(mailFolder.READ_WRITE);

    /*  Get the messages which is unread in the Inbox*/
    //Message messages[] = inbox.search(new FlagTerm(new Flags(Flag.SEEN), false));
    Message messages[] = mailFolder.getMessages();
    System.out.println("No. of Messages taken from Inbox: " + messages.length);
    
    /* Use a suitable FetchProfile    */
    FetchProfile fp = new FetchProfile();
    fp.add(FetchProfile.Item.ENVELOPE);
    fp.add(FetchProfile.Item.CONTENT_INFO);
    Emails = new String[messages.length][6]; 
    mesleng=messages.length;
    //if(show == 1)
    //    Emails = Emails10;
    //else if(show == 2)
    //    Emails = Emails20;
    int two=0;
    int three=0;
    int four=0;
    int five=0;
    mailFolder.fetch(messages, fp);
        try
        {
            String address = "";
            Address[] a;
            Date date;
            Date nextDate;
            Message temp;
            for(int i =0; i <messages.length; i++)
            {
                Emails[i][0] = messages[i].getFlags().contains(Flag.FLAGGED)? "!" : "";
                Emails[i][1] = messages[i].getFlags().contains(Flags.Flag.SEEN) ? "read" : "unread";
                Emails[i][2] = messages[i].getSentDate().toString();
                 // FROM
                 if ((a = messages[i].getFrom()) != null)
                {
                    for (int j = 0; j < a.length; j++)
                    {
                        address = a[j].toString();
                    }
                }
                 
                Emails[i][3] = address;
                Emails[i][4] = messages[i].getSubject();
                Emails[i][5] = Integer.toString(messages[i].getSize());
                if (i<10)
                {
                    Emails10[i][0] = messages[i].getFlags().contains(Flag.FLAGGED)? "!" : "";
                    Emails10[i][1] = messages[i].getFlags().contains(Flags.Flag.SEEN) ? "read" : "unread";
                    Emails10[i][2] = messages[i].getSentDate().toString();   
                    Emails10[i][3] = address;
                    Emails10[i][4] = messages[i].getSubject();
                    Emails10[i][5] = Integer.toString(messages[i].getSize());
                }
                else if (i>9 && i<20)
                {
                    Emails20[two][0] = messages[i].getFlags().contains(Flag.FLAGGED)? "!" : "";
                    Emails20[two][1] = messages[i].getFlags().contains(Flags.Flag.SEEN) ? "read" : "unread";
                    Emails20[two][2] = messages[i].getSentDate().toString();   
                    Emails20[two][3] = address;
                    Emails20[two][4] = messages[i].getSubject();
                    Emails20[two][5] = Integer.toString(messages[i].getSize());
                    two++;
                }
                else if (i>19 && i<30)
                {
                    Emails30[three][0] = messages[i].getFlags().contains(Flag.FLAGGED)? "!" : "";
                    Emails30[three][1] = messages[i].getFlags().contains(Flags.Flag.SEEN) ? "read" : "unread";
                    Emails30[three][2] = messages[i].getSentDate().toString();   
                    Emails30[three][3] = address;
                    Emails30[three][4] = messages[i].getSubject();
                    Emails30[three][5] = Integer.toString(messages[i].getSize());
                    three++;
                }
                else if (i>29 && i<40)
                {
                    Emails40[four][0] = messages[i].getFlags().contains(Flag.FLAGGED)? "!" : "";
                    Emails40[four][1] = messages[i].getFlags().contains(Flags.Flag.SEEN) ? "read" : "unread";
                    Emails40[four][2] = messages[i].getSentDate().toString();   
                    Emails40[four][3] = address;
                    Emails40[four][4] = messages[i].getSubject();
                    Emails40[four][5] = Integer.toString(messages[i].getSize());
                    four++;
                }
                else if (i>39 && i<50)
                {
                    Emails50[five][0] = messages[i].getFlags().contains(Flag.FLAGGED)? "!" : "";
                    Emails50[five][1] = messages[i].getFlags().contains(Flags.Flag.SEEN) ? "read" : "unread";
                    Emails50[five][2] = messages[i].getSentDate().toString();   
                    Emails50[five][3] = address;
                    Emails50[five][4] = messages[i].getSubject();
                    Emails50[five][5] = Integer.toString(messages[i].getSize());
                    five++;
                }
            }
            if (show ==1)
            {
                Emails=Emails10;
                
            }
            if (show ==2)
            {
                Emails=new String[20][6];
                int aa=0;    
                for (int i =0; i<10;i++)
                {
                    Emails[i][0]=Emails10[i][0];
                    Emails[i][1]=Emails10[i][1];
                    Emails[i][2]=Emails10[i][2];
                    Emails[i][3]=Emails10[i][3];
                    Emails[i][4]=Emails10[i][4];
                    Emails[i][5]=Emails10[i][5];
                    Emails[i+10][0]=Emails20[aa][0];
                    Emails[i+10][1]=Emails20[aa][1];
                    Emails[i+10][2]=Emails20[aa][2];
                    Emails[i+10][3]=Emails20[aa][3];
                    Emails[i+10][4]=Emails20[aa][4];
                    Emails[i+10][5]=Emails20[aa][5];
                    aa++;
                
                }
      
            }
            if (show ==3)
            {
                Emails=new String[20][6];
                int aa=0;    
                for (int i =0; i<10;i++)
                {
                    Emails[i][0]=Emails10[i][0];
                    Emails[i][1]=Emails10[i][1];
                    Emails[i][2]=Emails10[i][2];
                    Emails[i][3]=Emails10[i][3];
                    Emails[i][4]=Emails10[i][4];
                    Emails[i][5]=Emails10[i][5];
                    Emails[i+10][0]=Emails20[aa][0];
                    Emails[i+10][1]=Emails20[aa][1];
                    Emails[i+10][2]=Emails20[aa][2];
                    Emails[i+10][3]=Emails20[aa][3];
                    Emails[i+10][4]=Emails20[aa][4];
                    Emails[i+10][5]=Emails20[aa][5];
                    Emails[i+20][0]=Emails30[aa][0];
                    Emails[i+20][1]=Emails30[aa][1];
                    Emails[i+20][2]=Emails30[aa][2];
                    Emails[i+20][3]=Emails30[aa][3];
                    Emails[i+20][4]=Emails30[aa][4];
                    Emails[i+20][5]=Emails30[aa][5];
                    aa++;
                
                }
                
            }
            mailFolder.close(true);
            store.close();
        }
        catch (Exception ex)
        {
            System.out.println("Exception arise at the time of read mail 3");
            ex.printStackTrace();
        }
    }
    catch (NoSuchProviderException e)
    {
        e.printStackTrace();
        System.exit(1);
    }
    catch (MessagingException e)
    {
        e.printStackTrace();
        System.exit(2);
    }
    }
    private void redrawFolderList()
    {
        currentFolder =  folderList.getSelectedIndex();
        if(currentFolder == 0)
            mailBox = "INBOX";
        if(currentFolder == 1)
            mailBox = "[Gmail]/All Mail";
        if(currentFolder == 2)
            mailBox = "[Gmail]/Drafts";
        if(currentFolder == 3)
            mailBox = "[Gmail]/Important";
        if(currentFolder == 4)
            mailBox = "[Gmail]/Sent Mail";
        if(currentFolder == 5)
            mailBox = "[Gmail]/Spam";
        if(currentFolder == 6)
            mailBox = "[Gmail]/Starred";
        if(currentFolder == 7)
            mailBox = "[Gmail]/Trash";
        if(currentFolder == 8)
            mailBox = "[Gmail]/boop";
        //System.out.println("Selected Folder: "+currentFolder+" "+mailBox);
        getFolders();
        getEmails(listNumberEmails.getSelectedIndex());
        emailList.setModel(new javax.swing.table.DefaultTableModel(
            Emails,
            new String [] {
                "!", "Status", "Date", "Recevied From", "Subject", "Size"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        if (emailList.getColumnModel().getColumnCount() > 0) {
            emailList.getColumnModel().getColumn(0).setPreferredWidth(1);
        }
        super.repaint();
    }
    
    private void getFolders()
    {
        try {
        Properties props = new Properties();
        props.put("mail.host","mail.smtp.host");
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.port", "587");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.EnableSSL.enable", "true");
         
        //Session mailConnection = Session.getInstance(props, null);
        
        Session mailConnection = Session.getDefaultInstance(props, new javax.mail.Authenticator()
        {
            protected PasswordAuthentication getPasswordAuthentication()
            {
                return new PasswordAuthentication("agroupece433@gmail.com", "ece433test");
            }
        });
        props.setProperty("mail.store.protocol", "imaps");
        try {
            javax.mail.Store store = mailConnection.getStore("imaps");
            store.connect("imap.gmail.com", "agroupece433@gmail.com", "ece433test");
            javax.mail.Folder[] folders = store.getDefaultFolder().list("*");
            int i = 0;
            for (javax.mail.Folder folder : folders) {
                if ((folder.getType() & javax.mail.Folder.HOLDS_MESSAGES) != 0) {
                    //System.out.println(folder.getName() + ": " + folder.getMessageCount());
                    mailboxes[i] =folder.getName() + " (" + folder.getUnreadMessageCount()+")";            
                    i++;
                }
            }
        } catch (MessagingException e) {
            e.printStackTrace();
        }
        //Address to = new InternetAddress(toField.getText());
       // Address from = new InternetAddress(fromField.getText());
      }
      catch (Exception ex) {
        // I should really bring up a more specific error dialog here.
        ex.printStackTrace(); 
      }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        System.out.println("Starting application...");
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIMailUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIMailUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIMailUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIMailUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIMailUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify GEN-BEGIN:variables
    private javax.swing.JLabel appName;
    private javax.swing.JButton button1;
    private javax.swing.JButton button2;
    private javax.swing.JButton composeButton;
    public javax.swing.JTable emailList;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem fileMenu_close;
    private javax.swing.JList folderList;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JComboBox listNumberEmails;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton moveButton;
    private javax.swing.JButton moveButton1;
    private javax.swing.JButton openButton;
    private javax.swing.JButton receiveButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchFiled;
    private javax.swing.JMenu servicesMenu;
    private javax.swing.JMenu settingsMenu;
    // End of variables declaration GEN-END:variables
}